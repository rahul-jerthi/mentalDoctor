import streamlit as st
import google.generativeai as genai
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Configure Gemini API Key from env
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# Configure Gemini API Key (swap in yours, babe!)

# Function to analyze raw user input with Gemini
def analyze_depression(user_responses):
    prompt = f"""
    You are a clinical AI assistant assessing mental health with the PHQ-9 questionnaire.
    Analyze these raw user responses, assign PHQ-9 scores (0-3 per question: 0=Not at all, 1=Several days, 
    2=More than half the days, 3=Nearly every day), and determine depression severity.

    Responses:
    1. Little interest or pleasure in doing things? â†’ {user_responses[0]}
    2. Feeling down, depressed, or hopeless? â†’ {user_responses[1]}
    3. Trouble falling/staying asleep or sleeping too much? â†’ {user_responses[2]}
    4. Feeling tired or having little energy? â†’ {user_responses[3]}
    5. Poor appetite or overeating? â†’ {user_responses[4]}
    6. Feeling bad about yourself or like a failure? â†’ {user_responses[5]}
    7. Trouble concentrating? â†’ {user_responses[6]}
    8. Moving/speaking slowly or feeling restless? â†’ {user_responses[7]}
    9. Thoughts of self-harm? â†’ {user_responses[8]}

    Provide:
    - **PHQ-9 Score** (sum of scores, 0-27)
    - **Severity Level** (Minimal: 0-4, Mild: 5-9, Moderate: 10-14, Moderately Severe: 15-19, Severe: 20-27)
    - **Short Analysis** (explain the score based on responses)
    - **Recommendation** (tailored advice)

    Response format:
    PHQ-9 Score: <score>  
    Severity Level: <Minimal/Mild/Moderate/Moderately Severe/Severe>  
    Analysis: <brief explanation>  
    Recommendation: <advice>
    """
    
    model = genai.GenerativeModel("gemini-2.0-flash")
    response = model.generate_content(prompt)
    return response.text

# Streamlit UIâ€”clean, sexy, and interactive
st.set_page_config(page_title="Mind Glow", layout="centered", page_icon="âœ¨")

# Eye-catching title
st.markdown("""
    <h1 style='text-align: center;'>
        <span style='color: white;'>ðŸŒŸ Mind Glow:</span>
        <span style='color: violet;'>Your Vibe Check ðŸŒŸ</span>
    </h1>
""", unsafe_allow_html=True)
st.markdown("<h3 style='text-align: center; color: #6b7280;'>Spill your feels, babeâ€”Iâ€™ve got you! ðŸ’–</h3>", unsafe_allow_html=True)

# Instructions with flair
st.write("**How it works:** Type how youâ€™re feeling below. Example vibes are there to spark youâ€”keep it real, sexy!")

# PHQ-9 Questions with text_input and sample text
questions = [
    "Little interest or pleasure in doing things?",
    "Feeling down, depressed, or hopeless?",
    "Trouble falling/staying asleep or sleeping too much?",
    "Feeling tired or having little energy?",
    "Poor appetite or overeating?",
    "Feeling bad about yourself or like a failure?",
    "Trouble concentrating?",
    "Moving/speaking slowly or feeling restless?",
    "Thoughts of self-harm?"
]

placeholders = [
    "E.g., 'I donâ€™t care about anything anymore.'",
    "E.g., 'Iâ€™ve been super down lately.'",
    "E.g., 'I barely sleepâ€”nightmares suck.'",
    "E.g., 'Iâ€™m drained all the time.'",
    "E.g., 'I canâ€™t stop eating junk.'",
    "E.g., 'I feel like a total loser.'",
    "E.g., 'My brainâ€™s a messâ€”canâ€™t focus.'",
    "E.g., 'Iâ€™m either sluggish or wired.'",
    "E.g., 'Sometimes I think about ending it.'"
]

user_responses = []
for i, (q, p) in enumerate(zip(questions, placeholders)):
    response = st.text_input(f"{i+1}. {q}", placeholder=p, key=f"q{i}")
    user_responses.append(response)


# Analyze Buttonâ€”bold and clickable
if st.button("âœ¨ Glow Me Upâ€”Analyze Now! âœ¨", use_container_width=True):
    if all(response.strip() for response in user_responses):  # No empty fields, babe!
        with st.spinner("Reading your glow, cutie..."):
            result = analyze_depression(user_responses)
        st.markdown("<h2 style='color: #ff4b4b;'>ðŸŽ‰ Your Glow Report ðŸŽ‰</h2>", unsafe_allow_html=True)
        
        # Split the result into lines and format with bold + spacing
        lines = result.split('\n')
        formatted_result = ""
        for line in lines:
            if line.strip():  # Skip empty lines
                key, value = line.split(':', 1)  # Split on first colon only
                formatted_result += f"<p style='font-size: 18px; margin: 10px 0; color: #000000;'><strong>{key.strip()}:</strong> {value.strip()}</p>"
        
        st.markdown(
            f"<div style='background-color: #f9f9f9; padding: 20px; border-radius: 10px;'>{formatted_result}</div>",
            unsafe_allow_html=True
        )
    else:
        st.error("Oops, sexyâ€”fill in all the vibes so I can glow you up!")

# Footerâ€”my flirty touch
st.markdown("<hr>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; color: #ff69b4;'>ðŸ’‹ Crafted with love by your data darlingâ€”shine on, babe! ðŸ’‹</p>", unsafe_allow_html=True)
